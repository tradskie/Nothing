{"version":3,"sources":["config.js","App.js","reportWebVitals.js","nft.js","index.js"],"names":["NFTCONTRACT","STAKINGCONTRACT","moralisapi","nftpng","createAlchemyWeb3","providerOptions","binancechainwallet","package","walletconnect","WalletConnectProvider","options","infuraId","walletlink","WalletLink","appName","rpc","chainId","appLogoUrl","darkMode","App","Web3Modal","network","theme","cacheProvider","state","balance","rawearn","this","setState","show","nftamount","outvalue","target","value","axios","get","then","outputa","data","console","log","config","accept","headers","outputb","result","nftdata","class","style","margin","padding","textAlign","href","id","type","fontFamily","height","widht","marginTop","width","borderRadius","fontWeight","scope","className","display","color","textShadow","for","fontSize","name","role","border","src","paddingBottom","backgroundColor","boxShadow","marginLeft","alignSelf","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","web3","account","vaultcontract","moralisapikey","web3Modal","NFT","useState","apicall","getNfts","nftstk","getStk","loadingState","setLoadingState","connect","provider","Web3","send","eth","getAccounts","accounts","Contract","VAULTABI","output","nfts","Promise","all","map","i","item","tokenId","token_id","holder","owner_of","wallet","methods","tokensOfOwner","call","stakednfts","stkid","useEffect","callApi","length","gridTemplateColumns","columnGap","nft","toLowerCase","indexOf","stakeit","stake","from","alt","Button","onClick","unstake","position","top","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dc8f2fad.chunk.js","sourcesContent":["import { createAlchemyWeb3 } from '@alch/alchemy-web3';\r\nexport const NFTCONTRACT = \"0xb8C7990A2Ee1A120B7E4894fD7f8b0fEaAd6b9b9\";\r\nexport const STAKINGCONTRACT = \"0xC055bD6B13812306a77Ac1C7e9E18AD64b64a9Cc\";\r\nexport const polygonscanapi = \"https://api-testnet.polygonscan.com/api\";\r\nexport const moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nexport const nftpng = \"https://ipfs.io/ipfs/QmY5rGD6F2ZH38d3Dk39dZxNDYtxi2ihPe2iiV7rGkRDCW/\";\r\nexport const Web3Alc = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/rFAvR7xiSW3_LnoNi-K6bCqe0nmPmczv\");","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable jsx-a11y/anchor-has-content */\r\nimport \"./App.css\"\r\nimport { Button, ButtonGroup } from \"react-bootstrap\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport React, { Component } from \"react\"\r\nimport \"sf-font\"\r\nimport axios from \"axios\"\r\nimport ABI from \"./ABI.json\"\r\nimport VAULTABI from \"./VAULTABI.json\"\r\nimport TOKENABI from \"./TOKENABI.json\"\r\nimport {\r\n  NFTCONTRACT,\r\n  STAKINGCONTRACT,\r\n  polygonscanapi,\r\n  moralisapi,\r\n  nftpng,\r\n} from \"./config\"\r\nimport Web3Modal from \"web3modal\"\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"\r\nimport WalletLink from \"@coinbase/wallet-sdk\"\r\nimport Web3 from \"web3\"\r\nimport { createAlchemyWeb3 } from \"@alch/alchemy-web3\"\r\n\r\nvar account = null\r\nvar contract = null\r\nvar vaultcontract = null\r\nvar web3 = null\r\n\r\nconst Web3Alc = createAlchemyWeb3(\r\n  \"https://eth-rinkeby.alchemyapi.io/v2/8AX5AP2TU6G45ctsOXNt8K4Fz_BkhhZG\"\r\n)\r\n\r\nconst moralisapikey =\r\n  \"2VBV4vaCLiuGu6Vu7epXKlFItGe3jSPON8WV4CrXKYaNBEazEUrf1xwHxbrIo1oM\"\r\nconst polygonscanapikey = \"DBQX5JUSAVUZRK8CC4IN2UZF9N2HA63P4U\"\r\n\r\nconst providerOptions = {\r\n  binancechainwallet: {\r\n    package: true,\r\n  },\r\n  walletconnect: {\r\n    package: WalletConnectProvider,\r\n    options: {\r\n      infuraId: \"3cf2d8833a2143b795b7796087fff369\",\r\n    },\r\n  },\r\n  walletlink: {\r\n    package: WalletLink,\r\n    options: {\r\n      appName: \"Net2Dev NFT Minter\",\r\n      infuraId: \"3cf2d8833a2143b795b7796087fff369\",\r\n      rpc: \"\",\r\n      chainId: 4,\r\n      appLogoUrl: null,\r\n      darkMode: true,\r\n    },\r\n  },\r\n}\r\n\r\nconst web3Modal = new Web3Modal({\r\n  network: \"rinkeby\",\r\n  theme: \"dark\",\r\n  cacheProvider: true,\r\n  providerOptions,\r\n})\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      balance: [],\r\n      rawearn: [],\r\n    }\r\n  }\r\n\r\n  handleModal() {\r\n    this.setState({ show: !this.state.show })\r\n  }\r\n\r\n  handleNFT(nftamount) {\r\n    this.setState({ outvalue: nftamount.target.value })\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await axios\r\n      .get(\r\n        polygonscanapi +\r\n          `?module=stats&action=tokensupply&contractaddress=${NFTCONTRACT}&apikey=${polygonscanapikey}`\r\n      )\r\n      .then((outputa) => {\r\n        this.setState({\r\n          balance: outputa.data,\r\n        })\r\n        console.log(outputa.data)\r\n      })\r\n    let config = { \"X-API-Key\": moralisapikey, accept: \"application/json\" }\r\n    await axios\r\n      .get(\r\n        moralisapi + `/nft/${NFTCONTRACT}/owners?chain=mumbai&format=decimal`,\r\n        { headers: config }\r\n      )\r\n      .then((outputb) => {\r\n        const { result } = outputb.data\r\n        this.setState({\r\n          nftdata: result,\r\n        })\r\n        console.log(outputb.data)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { balance } = this.state\r\n    const { outvalue } = this.state\r\n\r\n    const sleep = (milliseconds) => {\r\n      return new Promise((resolve) => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    const expectedBlockTime = 10000\r\n\r\n    async function connectwallet() {\r\n      var provider = await web3Modal.connect()\r\n      web3 = new Web3(provider)\r\n      await provider.send(\"eth_requestAccounts\")\r\n      var accounts = await web3.eth.getAccounts()\r\n      account = accounts[0]\r\n      document.getElementById(\"wallet-address\").textContent = account\r\n      contract = new web3.eth.Contract(ABI, NFTCONTRACT)\r\n      vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT)\r\n      var getstakednfts = await vaultcontract.methods\r\n        .tokensOfOwner(account)\r\n        .call()\r\n      document.getElementById(\"yournfts\").textContent = getstakednfts\r\n      var getbalance = Number(\r\n        await vaultcontract.methods.balanceOf(account).call()\r\n      )\r\n      document.getElementById(\"stakedbalance\").textContent = getbalance\r\n      const arraynft = Array.from(getstakednfts.map(Number))\r\n      const tokenid = arraynft.filter(Number)\r\n      var rwdArray = []\r\n      tokenid.forEach(async (id) => {\r\n        var rawearn = await vaultcontract.methods\r\n          .earningInfo(account, [id])\r\n          .call()\r\n        var array = Array.from(rawearn.map(Number))\r\n        console.log(array)\r\n        array.forEach(async (item) => {\r\n          var earned = String(item).split(\",\")[0]\r\n          var earnedrwd = Web3.utils.fromWei(earned)\r\n          var rewardx = Number(earnedrwd).toFixed(2)\r\n          var numrwd = Number(rewardx)\r\n          console.log(numrwd)\r\n          rwdArray.push(numrwd)\r\n        })\r\n      })\r\n      function delay() {\r\n        return new Promise((resolve) => setTimeout(resolve, 300))\r\n      }\r\n      async function delayedLog(item) {\r\n        await delay()\r\n        var sum = item.reduce((a, b) => a + b, 0)\r\n        var formatsum = Number(sum).toFixed(2)\r\n        document.getElementById(\"earned\").textContent = formatsum\r\n      }\r\n      async function processArray(rwdArray) {\r\n        for (const item of rwdArray) {\r\n          await delayedLog(item)\r\n        }\r\n      }\r\n      return processArray([rwdArray])\r\n    }\r\n\r\n    async function verify() {\r\n      var getstakednfts = await vaultcontract.methods\r\n        .tokensOfOwner(account)\r\n        .call()\r\n      document.getElementById(\"yournfts\").textContent = getstakednfts\r\n      var getbalance = Number(\r\n        await vaultcontract.methods.balanceOf(account).call()\r\n      )\r\n      document.getElementById(\"stakedbalance\").textContent = getbalance\r\n    }\r\n\r\n    async function enable() {\r\n      contract.methods\r\n        .setApprovalForAll(STAKINGCONTRACT, true)\r\n        .send({ from: account })\r\n    }\r\n    async function rewardinfo() {\r\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n      const arraynft = Array.from(rawnfts.map(Number))\r\n      const tokenid = arraynft.filter(Number)\r\n      var rwdArray = []\r\n      tokenid.forEach(async (id) => {\r\n        var rawearn = await vaultcontract.methods\r\n          .earningInfo(account, [id])\r\n          .call()\r\n        var array = Array.from(rawearn.map(Number))\r\n        array.forEach(async (item) => {\r\n          var earned = String(item).split(\",\")[0]\r\n          var earnedrwd = Web3.utils.fromWei(earned)\r\n          var rewardx = Number(earnedrwd).toFixed(2)\r\n          var numrwd = Number(rewardx)\r\n          rwdArray.push(numrwd)\r\n        })\r\n      })\r\n      function delay() {\r\n        return new Promise((resolve) => setTimeout(resolve, 300))\r\n      }\r\n      async function delayedLog(item) {\r\n        await delay()\r\n        var sum = item.reduce((a, b) => a + b, 0)\r\n        var formatsum = Number(sum).toFixed(2)\r\n        document.getElementById(\"earned\").textContent = formatsum\r\n      }\r\n      async function processArray(rwdArray) {\r\n        for (const item of rwdArray) {\r\n          await delayedLog(item)\r\n        }\r\n      }\r\n      return processArray([rwdArray])\r\n    }\r\n    async function claimit() {\r\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n      const arraynft = Array.from(rawnfts.map(Number))\r\n      const tokenid = arraynft.filter(Number)\r\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\r\n        Web3Alc.eth.getBlock(\"pending\").then((block) => {\r\n          var baseFee = Number(block.baseFeePerGas)\r\n          var maxPriority = Number(tip)\r\n          var maxFee = maxPriority + baseFee\r\n          tokenid.forEach(async (id) => {\r\n            await vaultcontract.methods.claim([id]).send({\r\n              from: account,\r\n              maxFeePerGas: maxFee,\r\n              maxPriorityFeePerGas: maxPriority,\r\n            })\r\n          })\r\n        })\r\n      })\r\n    }\r\n    async function unstakeall() {\r\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n      const arraynft = Array.from(rawnfts.map(Number))\r\n      const tokenid = arraynft.filter(Number)\r\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\r\n        Web3Alc.eth.getBlock(\"pending\").then((block) => {\r\n          var baseFee = Number(block.baseFeePerGas)\r\n          var maxPriority = Number(tip)\r\n          var maxFee = maxPriority + baseFee\r\n          tokenid.forEach(async (id) => {\r\n            await vaultcontract.methods.unstake([id]).send({\r\n              from: account,\r\n              maxFeePerGas: maxFee,\r\n              maxPriorityFeePerGas: maxPriority,\r\n            })\r\n          })\r\n        })\r\n      })\r\n    }\r\n    async function mintnative() {\r\n      var _mintAmount = Number(outvalue)\r\n      var mintRate = Number(await contract.methods.cost().call())\r\n      var totalAmount = mintRate * _mintAmount\r\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\r\n        Web3Alc.eth.getBlock(\"pending\").then((block) => {\r\n          var baseFee = Number(block.baseFeePerGas)\r\n          var maxPriority = Number(tip)\r\n          var maxFee = baseFee + maxPriority\r\n          contract.methods.mint(account, _mintAmount).send({\r\n            from: account,\r\n            value: String(totalAmount),\r\n            maxFeePerGas: maxFee,\r\n            maxPriorityFeePerGas: maxPriority,\r\n          })\r\n        })\r\n      })\r\n    }\r\n\r\n    async function mint0() {\r\n      var _pid = \"0\"\r\n      var erc20address = await contract.methods.getCryptotoken(_pid).call()\r\n      var currency = new web3.eth.Contract(TOKENABI, erc20address)\r\n      var mintRate = await contract.methods.getNFTCost(_pid).call()\r\n      var _mintAmount = Number(outvalue)\r\n      var totalAmount = mintRate * _mintAmount\r\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\r\n        Web3Alc.eth.getBlock(\"pending\").then((block) => {\r\n          var baseFee = Number(block.baseFeePerGas)\r\n          var maxPriority = Number(tip)\r\n          var maxFee = maxPriority + baseFee\r\n          currency.methods\r\n            .approve(NFTCONTRACT, String(totalAmount))\r\n            .send({\r\n              from: account,\r\n            })\r\n            .then(\r\n              currency.methods.transfer(NFTCONTRACT, String(totalAmount)).send(\r\n                {\r\n                  from: account,\r\n                  maxFeePerGas: maxFee,\r\n                  maxPriorityFeePerGas: maxPriority,\r\n                },\r\n                async function (error, transactionHash) {\r\n                  console.log(\"Transfer Submitted, Hash: \", transactionHash)\r\n                  let transactionReceipt = null\r\n                  while (transactionReceipt == null) {\r\n                    transactionReceipt = await web3.eth.getTransactionReceipt(\r\n                      transactionHash\r\n                    )\r\n                    await sleep(expectedBlockTime)\r\n                  }\r\n                  window.console = {\r\n                    log: function (str) {\r\n                      var out = document.createElement(\"div\")\r\n                      out.appendChild(document.createTextNode(str))\r\n                      document.getElementById(\"txout\").appendChild(out)\r\n                    },\r\n                  }\r\n                  console.log(\"Transfer Complete\", transactionReceipt)\r\n                  contract.methods.mintpid(account, _mintAmount, _pid).send({\r\n                    from: account,\r\n                    maxFeePerGas: maxFee,\r\n                    maxPriorityFeePerGas: maxPriority,\r\n                  })\r\n                }\r\n              )\r\n            )\r\n        })\r\n      })\r\n    }\r\n    const refreshPage = () => {\r\n      window.location.reload()\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div class=\"container-fluid\">\r\n          <div\r\n            class=\"row\"\r\n            style={{ margin: \"auto\", padding: \"2px\", textAlign: \"center\" }}\r\n          >\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                Home\r\n              </a>\r\n            </div>\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                NFT Stake\r\n              </a>\r\n            </div>\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                Marketplace\r\n              </a>\r\n            </div>\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                Farms\r\n              </a>\r\n            </div>\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                NFT List\r\n              </a>\r\n            </div>\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                Bridge\r\n              </a>\r\n            </div>\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                Telegram\r\n              </a>\r\n            </div>\r\n            <div class=\"col\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"./\">\r\n                Twitter\r\n              </a>\r\n            </div>\r\n            <div>\r\n              <input\r\n                id=\"connectbtn\"\r\n                type=\"button\"\r\n                class=\"connectbutton\"\r\n                style={{ fontFamily: \"SF Pro Display\" }}\r\n                value=\"Connect Your Wallet\"\r\n              ></input>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <section id=\"hero\" style={{ height: \"fitContent\" }}>\r\n          <div\r\n            class=\"container\"\r\n            style={{ widht: \"100%\", marginTop: \"80px\", padding: \"25px\" }}\r\n          >\r\n            <div class=\"row px-4 pt-2\" style={{ width: \"auto\" }}>\r\n              <div class=\"header\">\r\n                <div\r\n                  style={{\r\n                    borderRadius: \"14px\",\r\n                    fontWeight: \"300\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <h1>CROPS NFT Staking Pool Active Rewards</h1>\r\n                </div>\r\n                <table\r\n                  class=\"table px-3 table-bordered table-dark\"\r\n                  style={{ textAlign: \"center\" }}\r\n                >\r\n                  <thead class=\"thead-light\">\r\n                    <tr>\r\n                      <th scope=\"col\">Collection</th>\r\n                      <th scope=\"col\">Rewards Per Day</th>\r\n                      <th scope=\"col\">Exchangeable Items</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Crops Bronze Collection</td>\r\n                      <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\r\n                        <span class=\"amount\">0.50</span>&nbsp;\r\n                        <span class=\"currency\">Crops</span>\r\n                      </td>\r\n                      <td class=\"exchange\">\r\n                        <span class=\"amount\">2</span>&nbsp;\r\n                        <span class=\"currency\">NFTs/M</span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Crops Silver Collection</td>\r\n                      <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\r\n                        <span class=\"amount\">2.50</span>&nbsp;\r\n                        <span class=\"currency\">Crops</span>\r\n                      </td>\r\n                      <td class=\"exchange\">\r\n                        <span class=\"amount\">10</span>&nbsp;\r\n                        <span class=\"currency\">NFTs/M</span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr class=\"stakegoldeffect\">\r\n                      <td>Crops Gold Collection</td>\r\n                      <td\r\n                        class=\"amount\"\r\n                        data-test-id=\"rewards-summary-one-time\"\r\n                      >\r\n                        <span class=\"amount\">1</span>&nbsp;\r\n                        <span class=\"currency\">Crops+</span>\r\n                      </td>\r\n                      <td class=\"exchange\">\r\n                        <span class=\"amount\">25 NFTs/M or </span>\r\n                        <span class=\"currency\">100 Crops/M</span>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <div class=\"header\">\r\n                  <div\r\n                    style={{\r\n                      borderRadius: \"14px\",\r\n                      fontWeight: \"300\",\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    <h1>CROPS Token Stake Farms</h1>\r\n                  </div>\r\n                  <table\r\n                    class=\"table table-bordered table-dark\"\r\n                    style={{ borderRadius: \"14px\" }}\r\n                  >\r\n                    <thead class=\"thead-light\">\r\n                      <tr>\r\n                        <th scope=\"col\">Farm Pools</th>\r\n                        <th scope=\"col\">Harvest Daily Earnings</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Stake CROPS to Earn CROPS</td>\r\n                        <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\r\n                          <span class=\"amount\">0.01</span>&nbsp;\r\n                          <span class=\"currency\">Per CROPS</span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Stake CROPS to Earn CROPS+</td>\r\n                        <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\r\n                          <span class=\"amount\">0.005</span>&nbsp;\r\n                          <span class=\"currency\">Per CROPS</span>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section id=\"main\" style={{ height: \"fitContent\" }}>\r\n          <div\r\n            className=\"container\"\r\n            style={{ display: \"flex\", height: \"500px\", marginTop: \"100px\" }}\r\n          >\r\n            <div className=\"mainRow1\">\r\n              <div class=\"nftminter\">\r\n                <form>\r\n                  <div class=\"row pt-3\">\r\n                    <div>\r\n                      <h1 class=\"pt-2\" style={{ fontWeight: 30 }}>\r\n                        {\" \"}\r\n                        NFT Minter\r\n                      </h1>\r\n                    </div>\r\n                    <h3>4/1000</h3>\r\n                    <h6>Your Wallet Address</h6>\r\n                    <div\r\n                      class=\"pb-3\"\r\n                      id=\"wallet-address\"\r\n                      style={{\r\n                        color: \"rgb(57, 255, 20)\",\r\n                        fontWeight: \"400\",\r\n                        textShadow: \"black, 1px 1px 1px\",\r\n                      }}\r\n                    >\r\n                      <label for=\"floatingInput\">Please Connect Wallet</label>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <label style={{ fontWeight: \"300\", fontSize: \"18px\" }}>\r\n                      Select NFT Quantity\r\n                    </label>\r\n                  </div>\r\n                  <div\r\n                    aria-label=\"First group\"\r\n                    name=\"amount\"\r\n                    role=\"group\"\r\n                    class=\"btn-group btn-group-lg\"\r\n                  >\r\n                    <button value=\"1\" type=\"button\" class=\"btn btn-primary\">\r\n                      1\r\n                    </button>\r\n                    <button value=\"2\" type=\"button\" class=\"btn btn-primary\">\r\n                      2\r\n                    </button>\r\n                    <button value=\"3\" type=\"button\" class=\"btn btn-primary\">\r\n                      3\r\n                    </button>\r\n                    <button value=\"4\" type=\"button\" class=\"btn btn-primary\">\r\n                      4\r\n                    </button>\r\n                    <button value=\"5\" type=\"button\" class=\"btn btn-primary\">\r\n                      5\r\n                    </button>\r\n                  </div>\r\n                  <h6\r\n                    class=\"pt-2\"\r\n                    style={{\r\n                      fontFamily: \"SF Pro Display\",\r\n                      fontWeight: \"300\",\r\n                      fontSize: \"18px\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    Buy with your preferred crypto!\r\n                  </h6>\r\n                  <div class=\"row px-2 pb-2 row-style\">\r\n                    <div class=\"col \">\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"button-style btn btn-primary\"\r\n                        style={{ border: \"0.2px\", borderRadius: \"14px\" }}\r\n                      >\r\n                        <img src=\"n2dr-logo.png\" width=\"100%\" />\r\n                      </button>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"button-style btn btn-primary\"\r\n                        style={{ border: \"0.2px\", borderRadius: \"14px\" }}\r\n                      >\r\n                        <img src=\"usdt.png\" width=\"70%\" />\r\n                      </button>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"button-style btn btn-primary\"\r\n                        style={{ border: \"0.2px\", borderRadius: \"14px\" }}\r\n                      >\r\n                        <img src=\"matic.png\" width=\"70%\" />\r\n                      </button>\r\n                    </div>\r\n                    <div>\r\n                      <label\r\n                        id=\"txout\"\r\n                        style={{\r\n                          color: \" rgb(57, 255, 20)\",\r\n                          marginTop: \"5px\",\r\n                          fontSize: \"20px\",\r\n                          fontWeight: \"500\",\r\n                          textShadow: \"rgb(0, 0, 0); 1px 1px 2px\",\r\n                          paddingBottom: \"10px\",\r\n                        }}\r\n                      >\r\n                        <p style={{ fontSize: \"20px\" }}>Transfer Status</p>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"flexcontainer\">\r\n                <ul class=\"flex-container\">\r\n                  <li class=\"flex-item\">Initial Deposit</li>\r\n                  <li class=\"flex-item\">Total Deposit</li>\r\n                  <li class=\"flex-item\">Withdrawn</li>\r\n                  <li class=\"flex-item\">Contract Balance</li>\r\n                  <li class=\"flex-item\">Referrals</li>\r\n                  <li class=\"flex-item\">Total Farmers</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"container\"\r\n            style={{ height: \"500px\", marginTop: \"100px\", display: \"flex\" }}\r\n          >\r\n            <div class=\"vault\" style={{ margin: \"25p\" }}>\r\n              <div class=\"flex\" style={{}}>\r\n                <h5 style={{ color: \"rgb(255, 255, 255)\", fontWeight: \"300\" }}>\r\n                  Your Vault Activity\r\n                </h5>\r\n                <h6 style={{ color: \"rgb(255, 255, 255)\" }}>\r\n                  Verify Staked Amount\r\n                </h6>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn btn-primary\"\r\n                  style={{\r\n                    backgroundColor: \"rgba(255, 255, 255, 0.063)\",\r\n                    boxShadow: \"rgb(0, 0, 0) 1px 1px 5px\",\r\n                  }}\r\n                >\r\n                  Verify\r\n                </button>\r\n                <table class=\"table mt-3 px-3\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td style={{ fontSize: \"19px\" }}>\r\n                        Your Staked NFTs:\r\n                        <span\r\n                          id=\"yournfts\"\r\n                          style={{\r\n                            backgroundColor: \"rgba(255, 255, 255, 0)\",\r\n                            fontSize: \"21px\",\r\n                            color: \"rgb(57, 255, 20)\",\r\n                            fontWeight: \"500\",\r\n                            textShadow: \"rgb(0, 0, 0) 1px 1px 2px\",\r\n                          }}\r\n                        ></span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td style={{ fontSize: \"15px\" }}>\r\n                        Total Staked NFTs:\r\n                        <span\r\n                          id=\"stakedbalance\"\r\n                          style={{\r\n                            backgroundColor: \"rgba(255, 255, 255, 0)\",\r\n                            fontSize: \"21px\",\r\n                            color: \"rgb(57, 255, 20)\",\r\n                            fontWeight: \"500\",\r\n                            textShadow: \"rgb(0, 0, 0) 1px 1px 2px\",\r\n                          }}\r\n                        ></span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td style={{ fontSize: \"19px\" }}>\r\n                        Unstake All Staked NFTs\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"mb-3 btn btn-primary\"\r\n                          style={{\r\n                            backgroundColor: \"rgba(255, 255, 255, 0.063)\",\r\n                            boxShadow: \"rgb(0, 0, 0) 1px 1px 5px\",\r\n                          }}\r\n                        >\r\n                          {\" \"}\r\n                          Unstake All\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            <div class=\"stakeRewards\">\r\n              <div class=\"container\" style={{}}>\r\n                <img\r\n                  class=\"col-lg-4\"\r\n                  src=\"http://localhost:3001/jeet.jpg\"\r\n                  style={{}}\r\n                />\r\n                <div class=\"container\" style={{}} />\r\n                <h5\r\n                  style={{\r\n                    color: \"rgb(255, 255, 255)\",\r\n                    fontWeight: \"300\",\r\n                  }}\r\n                >\r\n                  Staking Rewards\r\n                </h5>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn btn-primary\"\r\n                  style={{\r\n                    backgroundColor: \"rgba(255, 255, 255, 0.063)\",\r\n                    boxShadow: \"rgb(0, 0, 0) 1px 1px 5px\",\r\n                  }}\r\n                >\r\n                  Earned N2D Rewards\r\n                </button>\r\n                <div\r\n                  id=\"earned\"\r\n                  style={{\r\n                    color: \"rgb(57, 255, 20)\",\r\n                    marginTop: \"5px\",\r\n                    fontSize: \"25px\",\r\n                    fontWeight: \"500\",\r\n                    textShadow: \"rgb(0, 0, 0) 1px 1px 2px\",\r\n                  }}\r\n                >\r\n                  <p style={{ fontSize: \"20px\" }}> Earned Tokens</p>\r\n                </div>\r\n                <div class=\"col-12 mt-2\" style={{}}>\r\n                  <div style={{ color: \"white\" }}>Claim Rewards</div>\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"mb-2 btn btn-primary\"\r\n                    style={{\r\n                      backgroundColor: \"rgba(255, 255, 255, 0.063)\",\r\n                      boxShadow: \"rgb(0, 0, 0) 1px 1px 5px\",\r\n                    }}\r\n                  >\r\n                    Claim\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <div class=\"row nftportal mt-3\">\r\n          <div class=\"col mt-4 ml-3 d-flex\">\r\n            <div class=\"col d-flex justify-content-center\">\r\n              <div class=\"portalBox\">\r\n                <h1 class=\"n2dtitlestyle mt-3\">Your NFT Portal</h1>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn btn-primary\"\r\n                  style={{\r\n                    backgroundColor: \"rgb(0, 0, 0)\",\r\n                    marginLeft: \"15px\",\r\n                    height: \"40px\",\r\n                    alignSelf: \"center\",\r\n                    borderRadius: \"20px\",\r\n                    boxShadow: \"rgb(0, 0, 0) 1px 1px 5px\",\r\n                  }}\r\n                >\r\n                  Refresh NFT Portal\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default App\r\n","function reportWebVitals(onPerfEntry) {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\nimport \"./App.css\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport React from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\nimport \"sf-font\"\r\nimport axios from \"axios\"\r\nimport VAULTABI from \"./VAULTABI.json\"\r\nimport { NFTCONTRACT, STAKINGCONTRACT, moralisapi, nftpng } from \"./config\"\r\nimport Web3Modal from \"web3modal\"\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"\r\nimport WalletLink from \"@coinbase/wallet-sdk\"\r\nimport Web3 from \"web3\"\r\n\r\nvar web3 = null\r\nvar account = null\r\nvar vaultcontract = null\r\n\r\nconst moralisapikey =\r\n  \"2VBV4vaCLiuGu6Vu7epXKlFItGe3jSPON8WV4CrXKYaNBEazEUrf1xwHxbrIo1oM\"\r\nconst providerOptions = {\r\n  binancechainwallet: {\r\n    package: true,\r\n  },\r\n  walletconnect: {\r\n    package: WalletConnectProvider,\r\n    options: {\r\n      infuraId: \"3cf2d8833a2143b795b7796087fff369\",\r\n    },\r\n  },\r\n  walletlink: {\r\n    package: WalletLink,\r\n    options: {\r\n      appName: \"Net2Dev NFT Minter\",\r\n      infuraId: \"3cf2d8833a2143b795b7796087fff369\",\r\n      rpc: \"\",\r\n      chainId: 4,\r\n      appLogoUrl: null,\r\n      darkMode: true,\r\n    },\r\n  },\r\n}\r\n\r\nconst web3Modal = new Web3Modal({\r\n  network: \"rinkeby\",\r\n  theme: \"dark\",\r\n  cacheProvider: true,\r\n  providerOptions,\r\n})\r\n\r\nexport default function NFT() {\r\n  const [apicall, getNfts] = useState([])\r\n  const [nftstk, getStk] = useState([])\r\n  const [loadingState, setLoadingState] = useState(\"not-loaded\")\r\n\r\n  useEffect(() => {\r\n    callApi()\r\n  }, [])\r\n\r\n  async function callApi() {\r\n    var provider = await web3Modal.connect()\r\n    web3 = new Web3(provider)\r\n    await provider.send(\"eth_requestAccounts\")\r\n    var accounts = await web3.eth.getAccounts()\r\n    account = accounts[0]\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT)\r\n    let config = { \"X-API-Key\": moralisapikey, accept: \"application/json\" }\r\n    const nfts = await axios\r\n      .get(\r\n        moralisapi + `/nft/${NFTCONTRACT}/owners?chain=mumbai&format=decimal`,\r\n        { headers: config }\r\n      )\r\n      .then((output) => {\r\n        const { result } = output.data\r\n        return result\r\n      })\r\n    const apicall = await Promise.all(\r\n      nfts.map(async (i) => {\r\n        let item = {\r\n          tokenId: i.token_id,\r\n          holder: i.owner_of,\r\n          wallet: account,\r\n        }\r\n        return item\r\n      })\r\n    )\r\n    const stakednfts = await vaultcontract.methods\r\n      .tokensOfOwner(account)\r\n      .call()\r\n      .then((id) => {\r\n        return id\r\n      })\r\n    const nftstk = await Promise.all(\r\n      stakednfts.map(async (i) => {\r\n        let stkid = {\r\n          tokenId: i,\r\n        }\r\n        return stkid\r\n      })\r\n    )\r\n    getNfts(apicall)\r\n    getStk(nftstk)\r\n    console.log(apicall)\r\n    setLoadingState(\"loaded\")\r\n  }\r\n  if (loadingState === \"loaded\" && !apicall.length)\r\n    return <h1 className=\"text-3xl\">Wallet Not Connected</h1>\r\n  return (\r\n    <div className=\"nftportal mb-4\">\r\n      <div className=\"container col-lg-11\">\r\n        <div className=\"row items px-3 pt-3\">\r\n          <div\r\n            className=\"ml-3 mr-3\"\r\n            style={{\r\n              display: \"inline-grid\",\r\n              gridTemplateColumns: \"repeat(4, 5fr)\",\r\n              columnGap: \"20px\",\r\n            }}\r\n          >\r\n            {apicall.map((nft, i) => {\r\n              var owner = nft.wallet.toLowerCase()\r\n              if (owner.indexOf(nft.holder) !== -1) {\r\n                async function stakeit() {\r\n                  vaultcontract.methods\r\n                    .stake([nft.tokenId])\r\n                    .send({ from: account })\r\n                }\r\n                return (\r\n                  <div className=\"card nft-card mt-3 mb-3\" key={i}>\r\n                    <div className=\"image-over\">\r\n                      <img\r\n                        className=\"card-img-top\"\r\n                        src={nftpng + nft.tokenId + \".png\"}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"card-caption col-12 p-0\">\r\n                      <div className=\"card-body\">\r\n                        <h5 className=\"mb-0\">\r\n                          Net2Dev Collection NFT #{nft.tokenId}\r\n                        </h5>\r\n                        <h5 className=\"mb-0 mt-2\">\r\n                          Status\r\n                          <p\r\n                            style={{\r\n                              color: \"#39FF14\",\r\n                              fontWeight: \"bold\",\r\n                              textShadow: \"1px 1px 2px #000000\",\r\n                            }}\r\n                          >\r\n                            Ready to Stake\r\n                          </p>\r\n                        </h5>\r\n                        <div className=\"card-bottom d-flex justify-content-between\">\r\n                          <input\r\n                            key={i}\r\n                            type=\"hidden\"\r\n                            id=\"stakeid\"\r\n                            value={nft.tokenId}\r\n                          />\r\n                          <Button\r\n                            style={{\r\n                              marginLeft: \"2px\",\r\n                              backgroundColor: \"#ffffff10\",\r\n                            }}\r\n                            onClick={stakeit}\r\n                          >\r\n                            Stake it\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n            })}\r\n            {nftstk.map((nft, i) => {\r\n              async function unstakeit() {\r\n                vaultcontract.methods\r\n                  .unstake([nft.tokenId])\r\n                  .send({ from: account })\r\n              }\r\n              return (\r\n                <div>\r\n                  <div className=\"card stakedcard mt-3 mb-3\" key={i}>\r\n                    <div className=\"image-over\">\r\n                      <img\r\n                        style={{\r\n                          position: \"absolute\",\r\n                          top: \"0.05rem\",\r\n                          width: \"90px\",\r\n                        }}\r\n                        src=\"stakeicon.png\"\r\n                      ></img>\r\n                      <img\r\n                        className=\"card-img-top\"\r\n                        src={nftpng + nft.tokenId + \".png\"}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"card-caption col-12 p-0\">\r\n                      <div className=\"card-body\">\r\n                        <h5 className=\"mb-0\">\r\n                          Net2Dev Collection NFT #{nft.tokenId}\r\n                        </h5>\r\n                        <h5 className=\"mb-0 mt-2\">\r\n                          Status\r\n                          <p\r\n                            style={{\r\n                              color: \"#15F4EE\",\r\n                              fontWeight: \"bold\",\r\n                              textShadow: \"1px 1px 2px #000000\",\r\n                            }}\r\n                          >\r\n                            Currently Staked\r\n                          </p>\r\n                        </h5>\r\n                        <div className=\"card-bottom d-flex justify-content-between\">\r\n                          <input\r\n                            key={i}\r\n                            type=\"hidden\"\r\n                            id=\"stakeid\"\r\n                            value={nft.tokenId}\r\n                          />\r\n                          <Button\r\n                            style={{\r\n                              marginLeft: \"2px\",\r\n                              backgroundColor: \"#ffffff10\",\r\n                            }}\r\n                            onClick={unstakeit}\r\n                          >\r\n                            Unstake it\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n<Routes>\n<Route path=\"/nft\" element={<Nft />} />\n</Routes>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />\n    <Nft />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}